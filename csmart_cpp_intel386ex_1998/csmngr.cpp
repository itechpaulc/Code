

/////////////////////////////////////////////////////////////////////////////
//
//
//    $Header:      $
//    $Log:         $
//
//
//    Author : Paul Calinawan        January 1998
//
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//    NOTE:
//
//    This document contains CONFIDENTIAL and proprietary information
//    which is the property of Graphics Microsystems, Inc. It may not
//    be copied or transmitted in whole or in part by any means to any
//    media without Graphics Microsystems Inc's prior written permission.
//
/////////////////////////////////////////////////////////////////////////////



#include "csmngr.h"



//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
//  ColorSmartManager
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
//  HeadMachinesManager
//
//      - public interface functions :
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::SetInitialTrackballPos(int initTBX, int initTBY) {

    initialTrackballPosX = initTBX;
    initialTrackballPosY = initTBY;
}


//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::GetinitialTrackballPos(int &initTBX, int &initTBY) {

    initTBX = initialTrackballPosX;
    initTBY = initialTrackballPosY;
}


//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::SetAlignmentData(AlignmentData alignData) {

    alignmentData = alignData;
}


//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::GetAlignmentData(AlignmentData &alignData) {

    alignData = alignmentData;
}


//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::LinkHeadMachinesManager
(HeadMachinesManager *pHMM) {

    ptrHMM = pHMM;
}


//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::LinkTargetLampTimer
(TargetLampTimer *pTLT) {

    ptrTLT = pTLT;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::LinkSysLedStatusMachine
(SysLedStatusMachine *pLED1) {

    ptrLED1 = pLED1;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::LinkPciLedStatusMachine
(PciLedStatusMachine *pLED2) {

    ptrLED2 = pLED2;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::LinkMotorCommLedStatusMachine
(MotorCommLedStatusMachine *pLED3) {

    ptrLED3 = pLED3;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::LinkHeadCmdCommLedStatusMachine
(HeadCmdCommLedStatusMachine *pLED4) {

    ptrLED4 = pLED4;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
ColorSmartManager::LinkHeadMeasLedStatusMachine
(HeadMeasLedStatusMachine *pLED5) {

    ptrLED5 = pLED5;
}



//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
// ColorSmartManager - private helper functions
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////




//////////////////////////////////////////////////
//
// ColorSmartManager - RESPONSE ENTRIES
//
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// State Transition Matrices
//
//////////////////////////////////////////////////

STATE_TRANSITION_MATRIX(ColorSmartManager, _CSM_IDLE)
    EV_HANDLER(CalibrateAtWhitePlaque, CSM_h1),
    EV_HANDLER(CalibrateAtBlackHole, CSM_h3)
STATE_TRANSITION_MATRIX_END;

STATE_TRANSITION_MATRIX(ColorSmartManager, _CSM_CALIBRATING_AT_WHITE_PLAQUE)
    EV_HANDLER(CalibrateAtWhitePlaqueDone, CSM_h2)
STATE_TRANSITION_MATRIX_END;

STATE_TRANSITION_MATRIX(ColorSmartManager, _CSM_CALIBRATING_AT_BLACK_HOLE)
    EV_HANDLER(CalibrateAtBlackHoleDone, CSM_h4)
STATE_TRANSITION_MATRIX_END;

STATE_TRANSITION_MATRIX(ColorSmartManager, _CSM_GOING_HOME_FROM_BLACK_CALIBRATION)
    EV_HANDLER(GoHomeDone, CSM_h5)
STATE_TRANSITION_MATRIX_END;




//////////////////////////////////////////////////
//
// Matrix Table
//
//////////////////////////////////////////////////

DEFINE_RESPONSE_TABLE_ENTRY(ColorSmartManager)
    STATE_MATRIX_ENTRY(_CSM_IDLE),
    STATE_MATRIX_ENTRY(_CSM_CALIBRATING_AT_WHITE_PLAQUE),
    STATE_MATRIX_ENTRY(_CSM_CALIBRATING_AT_BLACK_HOLE),
    STATE_MATRIX_ENTRY(_CSM_GOING_HOME_FROM_BLACK_CALIBRATION)
RESPONSE_TABLE_END;


//////////////////////////////////////////////////
//
// Static Member Definitions
//
//////////////////////////////////////////////////

HeadMachinesManager             * ColorSmartManager::ptrHMM = 0;
TargetLampTimer                 * ColorSmartManager::ptrTLT = 0;

SysLedStatusMachine             * ColorSmartManager::ptrLED1 = 0;
PciLedStatusMachine             * ColorSmartManager::ptrLED2 = 0;
MotorCommLedStatusMachine       * ColorSmartManager::ptrLED3 = 0;
HeadCmdCommLedStatusMachine     * ColorSmartManager::ptrLED4 = 0;
HeadMeasLedStatusMachine        * ColorSmartManager::ptrLED5 = 0;



int     ColorSmartManager::initialTrackballPosX;
int     ColorSmartManager::initialTrackballPosY;

AlignmentData   ColorSmartManager::alignmentData;


WORD        ColorSmartManager::errorCount = 0;



//////////////////////////////////////////////////
//
// ColorSmartManager - Constructors, Destructors
//
//////////////////////////////////////////////////

ColorSmartManager::ColorSmartManager(BYTE sMsysID)
    :StateMachine(sMsysID)
{
    ASSIGN_RESPONSE_TABLE();

    SetCurrState(CSM_IDLE);
}

ColorSmartManager::~ColorSmartManager(void) { }


WORD    ColorSmartManager::GetErrorCount(void) {

    return  ColorSmartManager::errorCount;
}



//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
// ColorSmartManager - private EXIT PROCEDURES
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

WORD
ColorSmartManager::CSM_h1(void)
{

    return  CSM_CALIBRATING_AT_WHITE_PLAQUE;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

WORD
ColorSmartManager::CSM_h2(void)
{

    return  CSM_IDLE;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

WORD
ColorSmartManager::CSM_h3(void)
{

    return  CSM_CALIBRATING_AT_BLACK_HOLE;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

WORD
ColorSmartManager::CSM_h4(void)
{

    return  CSM_GOING_HOME_FROM_BLACK_CALIBRATION;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

WORD
ColorSmartManager::CSM_h5(void)
{

    return  CSM_IDLE;
}

