




/////////////////////////////////////////////////////////////////////////////
//
//
//    $Header:      $
//    $Log:         $
//
//
//    Author : Paul Calinawan        December 1997
//
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//    NOTE:
//
//    This document contains CONFIDENTIAL and proprietary information
//    which is the property of Graphics Microsystems, Inc. It may not
//    be copied or transmitted in whole or in part by any means to any
//    media without Graphics Microsystems Inc's prior written permission.
//
/////////////////////////////////////////////////////////////////////////////



#include "80386ex.h"

#include "ledstat.h"


//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
//  SysLedStatusMachine
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// Cadence Table
//
//////////////////////////////////////////////////

/*
const BYTE	LEDcadenceTbl[] = {

	// 32 State Cadence

	0xff, 0xff, 0xff, 0xff,		// Steady
	0xff, 0xff, 0x00, 0x00,		// Slow Pulse
	0xaa, 0xaa, 0x00, 0x00,		// Fast Pulse
	0x80, 0x00, 0x00, 0x00		// Strobed
};
*/

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
// SysLedStatusMachine - private helper functions
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

void
SysLedStatusMachine::LedOn(void)
{
    p1Status = GetIO1Latch();           // Read Port 1

    //p1Status |= SYS_STATUS_LED_PORT;    // Set LED Port

    SetIO1Latch(p1Status);              // Write to Port
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
SysLedStatusMachine::LedOff(void)
{
    p1Status = GetIO1Latch();           // Read Port 1

    //p1Status &= ~SYS_STATUS_LED_PORT;   // Clear LED Port

    SetIO1Latch(p1Status);              // Write to Port
}

//////////////////////////////////////////////////
//
// SysLedStatusMachine - RESPONSE ENTRIES
//
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// State Transition Matrices
//
//////////////////////////////////////////////////

STATE_TRANSITION_MATRIX(SysLedStatusMachine, _SYS_SLM_IDLE)
    EV_HANDLER(TimeOut, SYS_SLM_h1)
STATE_TRANSITION_MATRIX_END;

STATE_TRANSITION_MATRIX(SysLedStatusMachine, _SYS_SLM_ON)
    EV_HANDLER(TimeOut, SYS_SLM_h1)
STATE_TRANSITION_MATRIX_END;

STATE_TRANSITION_MATRIX(SysLedStatusMachine, _SYS_SLM_OFF)
    EV_HANDLER(TimeOut, SYS_SLM_h2)
STATE_TRANSITION_MATRIX_END;


//////////////////////////////////////////////////
//
// Matrix Table
//
//////////////////////////////////////////////////

DEFINE_RESPONSE_TABLE_ENTRY(SysLedStatusMachine)
    STATE_MATRIX_ENTRY(_SYS_SLM_IDLE),
    STATE_MATRIX_ENTRY(_SYS_SLM_ON),
    STATE_MATRIX_ENTRY(_SYS_SLM_OFF)
RESPONSE_TABLE_END;


//////////////////////////////////////////////////
//
// Static Member Definitions
//
//////////////////////////////////////////////////

BYTE    SysLedStatusMachine::p1Status;


//////////////////////////////////////////////////
//
// SysLedStatusMachine - Constructors, Destructors
//
//////////////////////////////////////////////////

SysLedStatusMachine::SysLedStatusMachine(STATE_MACHINE_ID sMsysID)
    :StateMachine(sMsysID)
{
    LedOff();

    ASSIGN_RESPONSE_TABLE();

    SetCurrState(SYS_SLM_IDLE);
}

SysLedStatusMachine::~SysLedStatusMachine(void) { }


//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
// SysLedStatusMachine - private EXIT PROCEDURES
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

WORD
SysLedStatusMachine::SYS_SLM_h1(void)
{
        LedOff();

        StartTimer(MSEC(50));

    return  SYS_SLM_OFF;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

WORD
SysLedStatusMachine::SYS_SLM_h2(void)
{
        LedOn();

        StartTimer(MSEC(50));

    return  SYS_SLM_ON;
}




