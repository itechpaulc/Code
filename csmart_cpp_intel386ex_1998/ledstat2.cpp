



/////////////////////////////////////////////////////////////////////////////
//
//
//    $Header:      $
//    $Log:         $
//
//
//    Author : Paul Calinawan        December 1997
//
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//    NOTE:
//
//    This document contains CONFIDENTIAL and proprietary information
//    which is the property of Graphics Microsystems, Inc. It may not
//    be copied or transmitted in whole or in part by any means to any
//    media without Graphics Microsystems Inc's prior written permission.
//
/////////////////////////////////////////////////////////////////////////////






#include "80386ex.h"

#include "ledstat.h"




//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
//  PciLedStatusMachine
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
// PciLedStatusMachine - private helper functions
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

void
PciLedStatusMachine::LedOn(void)
{
    p2Status = GetIO2Latch();           // Read Port 2

    //p2Status |= PCI_STATUS_LED_PORT;    // Set LED Port
    p2Status |= BIT7MSK;    // Set LED Port

    SetIO2Latch(p2Status);              // Write to Port
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
PciLedStatusMachine::LedOff(void)
{
    p2Status = GetIO2Latch();           // Read Port 2

    //p2Status &= ~PCI_STATUS_LED_PORT;   // Clear LED Port
    p2Status &= ~BIT7MSK;   // Clear LED Port

    SetIO2Latch(p2Status);              // Write to Port
}


//////////////////////////////////////////////////
//
// PciLedStatusMachine - RESPONSE ENTRIES
//
//////////////////////////////////////////////////


//////////////////////////////////////////////////
//
// State Transition Matrices
//
//////////////////////////////////////////////////

STATE_TRANSITION_MATRIX(PciLedStatusMachine, _PCI_SLM_IDLE)
    EV_HANDLER(TimeOut, PCI_SLM_h1)
STATE_TRANSITION_MATRIX_END;

STATE_TRANSITION_MATRIX(PciLedStatusMachine, _PCI_SLM_ON)
    EV_HANDLER(TimeOut, PCI_SLM_h1)
STATE_TRANSITION_MATRIX_END;

STATE_TRANSITION_MATRIX(PciLedStatusMachine, _PCI_SLM_OFF)
    EV_HANDLER(TimeOut, PCI_SLM_h2)
STATE_TRANSITION_MATRIX_END;


//////////////////////////////////////////////////
//
// Matrix Table
//
//////////////////////////////////////////////////

DEFINE_RESPONSE_TABLE_ENTRY(PciLedStatusMachine)
    STATE_MATRIX_ENTRY(_PCI_SLM_IDLE),
    STATE_MATRIX_ENTRY(_PCI_SLM_ON),
    STATE_MATRIX_ENTRY(_PCI_SLM_OFF)
RESPONSE_TABLE_END;


//////////////////////////////////////////////////
//
// Static Member Definitions
//
//////////////////////////////////////////////////

BYTE    PciLedStatusMachine::p2Status;


//////////////////////////////////////////////////
//
// PciLedStatusMachine - Constructors, Destructors
//
//////////////////////////////////////////////////

PciLedStatusMachine::PciLedStatusMachine(STATE_MACHINE_ID sMsysID)
    :StateMachine(sMsysID)
{
    LedOff();

    ASSIGN_RESPONSE_TABLE();

    SetCurrState(PCI_SLM_IDLE);
}

PciLedStatusMachine::~PciLedStatusMachine(void) { }


//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
// PciLedStatusMachine - private EXIT PROCEDURES
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

WORD
PciLedStatusMachine::PCI_SLM_h1(void)
{
        LedOff();

        StartTimer(MSEC(50));

    return  PCI_SLM_OFF;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

WORD
PciLedStatusMachine::PCI_SLM_h2(void)
{
        LedOn();

        StartTimer(MSEC(50));

    return  PCI_SLM_ON;
}




