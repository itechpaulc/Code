


/////////////////////////////////////////////////////////////////////////////
//
//
//    $Header:      $
//    $Log:         $
//
//
//    Author : Paul Calinawan        March 1998
//
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//    NOTE:
//
//    This document contains CONFIDENTIAL and proprietary information
//    which is the property of Graphics Microsystems, Inc. It may not
//    be copied or transmitted in whole or in part by any means to any
//    media without Graphics Microsystems Inc's prior written permission.
//
/////////////////////////////////////////////////////////////////////////////




#include "mftimer.h"




//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
//  MeasurementFlashTimer
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
//  HeadMachinesManager
//
//      - public interface functions :
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

void
MeasurementFlashTimer::SetMeasurementFlashTimeOut(WORD xTimeOut)
{
    measurementFlashTimeOut = xTimeOut;
}

//////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////

BOOL
MeasurementFlashTimer::IsMeasurementFlashTimerExpired(void)
{
    return  measurementFlashTimerExpired;
}


//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
// MeasurementFlashTimer - private helper functions
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////




//////////////////////////////////////////////////
//
// MeasurementFlashTimer - RESPONSE ENTRIES
//
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// State Transition Matrices
//
//////////////////////////////////////////////////

STATE_TRANSITION_MATRIX(MeasurementFlashTimer, _MFT_IDLE)
    EV_HANDLER(StartMeasurementFlashTimer, MFT_h1)
STATE_TRANSITION_MATRIX_END;

STATE_TRANSITION_MATRIX(MeasurementFlashTimer, _MFT_WAITING_FOR_X_TIMER_TO_EXPIRE)
    EV_HANDLER(TimeOut, MFT_h2),
    EV_HANDLER(CancelMeasurementFlashTimer, MFT_h3)
STATE_TRANSITION_MATRIX_END;



//////////////////////////////////////////////////
//
// Matrix Table
//
//////////////////////////////////////////////////

DEFINE_RESPONSE_TABLE_ENTRY(MeasurementFlashTimer)
    STATE_MATRIX_ENTRY(_MFT_IDLE),
    STATE_MATRIX_ENTRY(_MFT_WAITING_FOR_X_TIMER_TO_EXPIRE)
RESPONSE_TABLE_END;


//////////////////////////////////////////////////
//
// Static Member Definitions
//
//////////////////////////////////////////////////

WORD    MeasurementFlashTimer::measurementFlashTimeOut = 0x0000;

BOOL    MeasurementFlashTimer::measurementFlashTimerExpired = TRUE;

WORD    MeasurementFlashTimer::errorCount = 0;



//////////////////////////////////////////////////
//
// MeasurementFlashTimer - Constructors, Destructors
//
//////////////////////////////////////////////////

MeasurementFlashTimer::MeasurementFlashTimer(STATE_MACHINE_ID sMsysID)
    :StateMachine(sMsysID)
{
    ASSIGN_RESPONSE_TABLE();

    SetCurrState(MFT_IDLE);
}

MeasurementFlashTimer::~MeasurementFlashTimer(void) { }


WORD    MeasurementFlashTimer::GetErrorCount(void) {

    return  MeasurementFlashTimer::errorCount;
}



//////////////////////////////////////////////////
//////////////////////////////////////////////////
//
// MeasurementFlashTimer - private EXIT PROCEDURES
//
//////////////////////////////////////////////////
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// Message: Start X Axis Timer
//
// IMPORTANT: This message overrides the
//            current value of measurementFlashTimeOut
//
//////////////////////////////////////////////////

WORD
MeasurementFlashTimer::MFT_h1(void) {

    // Get the data from the message

    measurementFlashTimeOut = (WORD)(GetCurrEvent().msgData1);

        // Make sure timeout has value

        if(measurementFlashTimeOut != 0)
        {
               StartHiPriorityTimer(MSEC(measurementFlashTimeOut));

                measurementFlashTimerExpired = FALSE;

            return  MFT_WAITING_FOR_X_TIMER_TO_EXPIRE;
        }

        measurementFlashTimerExpired = TRUE;

        // Send Expired Message to MTRC

        SendHiPrMsg(HeadMachinesManagerID, MeasurementFlashTimerExpired);

    return  MFT_IDLE;
}


//////////////////////////////////////////////////
//
// Message : Kernel-TimeOut
//
//////////////////////////////////////////////////

WORD
MeasurementFlashTimer::MFT_h2(void) {

        measurementFlashTimerExpired = TRUE;

        // Send Expired Message to MTRC

        SendHiPrMsg(HeadMachinesManagerID, MeasurementFlashTimerExpired);

    return  MFT_IDLE;
}


//////////////////////////////////////////////////
//
//  Message : Cancel X Axis Timer
//
//////////////////////////////////////////////////

WORD
MeasurementFlashTimer::MFT_h3(void)
{
        measurementFlashTimerExpired = TRUE;

        CancelTimer();

    return  MFT_IDLE;
}




